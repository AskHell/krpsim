use std::str::FromStr;
use std::collections::HashMap;

use crate::ast::{
    Inventory,
    Process,
    Simulation,
    convert
};

grammar;

pub Simulation: Simulation = {
    <i:Associative> <s:Simulation> => {
        let (name, quantity) = i;

        s.add_inventory(name, quantity)
    },
    <p:Process> <s:Simulation> => {
        s.add_process(p)
    },
    <o:Optimize> Comment* => {
        let s = Simulation::default();

        s.optimize(o)
    },
};

// optimize:(commodity;time;...)
Optimize: (Vec<String>, bool) = {
    Comment* "optimize" CompleteBy <l: NameList> => {
        let mut vec: Vec<String> = vec![];
        let mut time = false;

        for e in l.into_iter() {
            if e == "time" { time = true; }
            else { vec.push(e) }
        }
        (vec, time)
    }
};

// name:(input1:0;input2:1;...):(output1:1;output2:4):time
Process: Process = {
    <n:Name> CompleteBy <i:AssociativeList?> CompleteBy <o:AssociativeList?> CompleteBy <d:Num> => {
        let i = i.unwrap_or(HashMap::new());
        let o = o.unwrap_or(HashMap::new());
        Process::new(n, i, o, d)
    }
};

// (name:0;name1:1;...)
AssociativeList: Inventory = {
    Open <l:(<Associative> Separate)*> <e:Associative?> Close => {
        let mut vec = l;

        if let Some(e) = e { vec.push(e); }
        convert(vec)
    }
};

// (name;name1;...)
NameList: Vec<String> = {
    Open <l:(<Name> Separate)*> <e:Name?> Close => {
        let mut vec = l;

        if let Some(e) = e { vec.push(e); }
        vec
    }
};

// name:0
Associative: (String, u32) = {
    <a:Name> CompleteBy <b:Num> => {
        (a, b)
    }
};

CompleteBy = Comment* ":";
Separate = Comment* ";";
Open = Comment* "(";
Close = Comment* ")";

Num: u32 = Comment* <r"[0-9]+"> => u32::from_str(<>).unwrap();

// Names must begin by an alpha character or '_' but not by a number
Name: String = Comment* <r"[a-zA-Z_][a-zA-Z_0-9]*"> => String::from(<>);

Comment = r"#[^\n]*";
